@model CarpoolingCR.Objects.Responses.TripCreateResponse

@{
    /**/

    ViewBag.Title = "Create";
}

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<meta charset="utf-8">
<br />
<div class="row form-group" style="text-align:center">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <h5 class="panel-title pull-left">Creación de viajes</h5>
    </div>
</div>
<div class="row" style="text-align:center">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <hr />
    </div>
</div>

@using (Html.BeginForm("Create", "Trips", FormMethod.Post, new { id = "createtripform" }))
{
    <input type="hidden" id="hiddenOption1" />
    <input type="hidden" id="hiddenOption2" />

    @Html.AntiForgeryToken()

    <div id="loading-content" class="row form-group" style="text-align:center; height:500px;">
        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">

        </div>
        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">
            <img src="~/Content/Icons/processing.gif" style="vertical-align:middle" /><br />
            <small>Procesando...</small>
        </div>
        <div class="col-lg-4 col-md-4 col-sm-4 col-xs-4">

        </div>
    </div>
    <div id="main-content" class="form-horizontal hidden">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Origen</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        <select id="FromTown" name="FromTown" class="form-control waypoints">
                            @Html.Raw(Model.DistrictControlOptions)
                        </select>
                        <label id="fromDistrictId"></label>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Destino</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        <select id="ToTown" name="ToTown" class="form-control waypoints">
                            @Html.Raw(Model.DistrictControlOptions)
                        </select>
                        <label id="toDistrictId"></label>
                    </div>
                </div>
            </div>
        </div>
        <div class="row form-group" style="padding:20px">
            <div class="row form-group panel panel-default" style="padding:20px; border-radius:10px">
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <div id="radioset" role="toolbar" class="ui-controlgroup ui-controlgroup-horizontal ui-helper-clearfix">
                                <div class="row">
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                        <div class="input-group" onclick="ChangeTripRound(false)" style="cursor:pointer">
                                            <span class="input-group-addon" style="border-radius: 10px 0px 0px 10px">
                                                <input type="radio" id="rbOneWay" onclick="ChangeTripRound(false)" name="rbOneWay" tabindex="-1" aria-label="..." checked>
                                            </span>
                                            <small class="form-control" style="width:160px; border-radius: 0px 10px 10px 0px"><span class="glyphicon glyphicon-arrow-up"></span> Sólo Ida</small>
                                        </div>
                                    </div>
                                    <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                        <div class="input-group" onclick="ChangeTripRound(true)" style="cursor:pointer">
                                            <span class="input-group-addon" style="border-radius: 10px 0px 0px 10px">
                                                <input type="radio" id="rbRound" onclick="ChangeTripRound(true)" name="rbRound" tabindex="-1" aria-label="...">
                                            </span>
                                            <small class="form-control" style="width:160px;border-radius: 0px 10px 10px 0px"><span class="glyphicon glyphicon-arrow-up"></span><span class="glyphicon glyphicon-arrow-down"></span> Ida y Vuelta</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 pull-right">
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label" style="text-align:left">Cuota</label>
                                </div>
                                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                    @Html.EditorFor(model => model.Trip.Price, new { htmlAttributes = new { @class = "form-control money" } })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            <hr />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                </div>
                                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                    <label class="control-label" style="text-align:left">Ida</label>
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label" style="text-align:left">Ruta</label>
                                </div>
                                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                    <select id="Route" name="Route" class="form-control waypoints">
                                        @Html.Raw(Model.DistrictControlOptions)
                                    </select>
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label" style="text-align:left">Fecha</label>
                                </div>
                                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                    <input id="DateTimeDisplay" name="DateTimeDisplay" autocomplete="off" class="form-control" type="text" onfocus="blur();">
                                    <input type="text" id="DateTime" name="DateTime" class="hidden" />
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2">
                                </div>

                                <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                                    @*<label class="control-label" style="text-align:left">Espacios</label>*@
                                </div>
                                <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">

                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2">
                                    <label class="control-label" style="text-align:left">Campos</label>
                                </div>
                                <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                                    @*<input id="TotalSpaces" class="hidden" style="width:40px;" name="TotalSpaces" disabled onfocus="blur();">*@
                                    <input id="AvailableSpaces" style="width:40px;" name="AvailableSpaces" onfocus="blur();">
                                </div>
                                <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">

                                </div>
                            </div>
                            <div class="form-group hidden">
                                @Html.LabelFor(model => model.Trip.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                                <div class="col-md-10">
                                    @Html.EnumDropDownListFor(model => model.Trip.Status, htmlAttributes: new { @class = "form-control" })
                                </div>
                            </div>
                            <div class="row form-group">
                                <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                    <label class="control-label" style="text-align:left">Encuentro</label>
                                </div>
                                <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12 pull-left">
                                    @Html.EditorFor(model => model.Trip.Details, new { htmlAttributes = new { @class = "form-control w-100" } })
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                            <div class="row">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 pull-left">
                                    <div id="map" style="height:90px;border-radius:10px"></div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                    <div id="aprox-time-div" class="text-info pull-left">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="to-route-container">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                <hr />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="row form-group">
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                    </div>
                                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                        <label class="control-label" style="text-align:left">Vuelta</label>
                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                        <label class="control-label" style="text-align:left">Ruta</label>
                                    </div>
                                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                        <select id="Route-To" name="Route-To" class="form-control waypoints">
                                            @Html.Raw(Model.DistrictControlOptions)
                                        </select>
                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                        <label class="control-label" style="text-align:left">Fecha</label>
                                    </div>
                                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                                        <input id="DateTimeDisplay-To" name="DateTimeDisplay-To" autocomplete="off" class="form-control" type="text" onfocus="blur();">
                                        <input type="text" id="DateTime-To" name="DateTime-To" class="hidden" />
                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-lg-2 col-md-2 col-sm-2">
                                        <label class="control-label" style="text-align:left">Campos</label>
                                    </div>
                                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                                        @*<input id="TotalSpaces" class="hidden" style="width:40px;" name="TotalSpaces" disabled onfocus="blur();">*@
                                        <input id="AvailableSpaces-To" style="width:40px;" name="AvailableSpaces-To" onfocus="blur();">
                                    </div>
                                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">

                                    </div>
                                </div>
                                <div class="row form-group">
                                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                                        <label class="control-label" style="text-align:left">Encuentro</label>
                                    </div>
                                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12 pull-left">
                                        <input type="text" id="Trip_Details_To" name="Trip_Details_To" class="form-control" />
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 pull-left">
                                        <div id="map-to" style="height:90px;border-radius:10px"></div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                        <div id="aprox-time-div-to" class="text-info pull-left">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @*@Html.ActionLink("<<", "Index", new { }, new { @class = "btn btn-primary" })*@
                <button id="btn-create-trip" onclick="return SetDateTimeFormats()" class="btn btn-info btn-sm btn-block pull-right" data-loading-text="<i class='fa fa-circle-o-notch fa-spin pull-right'></i> Crear Viaje" style="width:150px; border-radius:25px">Crear Viaje</button>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    $('#main-content').slideUp(1);
    $('#loading-content').slideDown(1);
    $('#to-route-container').slideUp(1);
    $('#aprox-time-div').slideUp(1);
    $('#aprox-time-div-to').slideUp(1);

    $('#Trip_Price').mask('000000');

    $(document).ready(function () {
        //$('#spinning-gif').addClass("hidden");
        $('#main-content').removeClass('hidden');
        $('#map').css('height', '300px');
        $('#map-to').css('height', '300px');
        $('#main-content').slideDown();
        $('#loading-content').slideUp();
        $('#TotalSpaces').removeClass('hidden');
    });

    $('#TotalSpaces').spinner({
        min: @Model.Vehicle.Spaces,
        max: @Model.Vehicle.Spaces,
        stop: function (e, ui) {
            //$('#AvailableSpaces').val($('#TotalSpaces').val() - 1)
        }
    }).val(@Model.Vehicle.Spaces);

    $('#AvailableSpaces').spinner({
        min: 1,
        max: @Model.Vehicle.Spaces - 1,
        stop: function (e, ui) {
            if ($('#AvailableSpaces').val() > $('#TotalSpaces').val()) {
                $('#AvailableSpaces').val($('#TotalSpaces').val());
            }
        }
    }).val(@Model.Vehicle.Spaces - 1);

    $('#AvailableSpaces-To').spinner({
        min: 1,
        max: @Model.Vehicle.Spaces - 1,
        stop: function (e, ui) {
            if ($('#AvailableSpaces-To').val() > $('#TotalSpaces').val()) {
                $('#AvailableSpaces-To').val($('#TotalSpaces').val());
            }
        }
    }).val(@Model.Vehicle.Spaces - 1);

    $('#FromTown')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                $('#fromDistrictId').val(li.val())
            );
        });
    $('#ToTown')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                $('#toDistrictId').val(li.val())
            );
        });
    $('#Route')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                //$('#toDistrictId').val(li.val())
            );
        });
    $('#Route-To')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                //$('#toDistrictId').val(li.val())
            );
        });

    $('.waypoints').focusout(function(){
        var from = $('#FromTown').val();
        var to = $('#ToTown').val();
        var route = $('#Route').val();
        var routeto = $('#Route-To').val();

        if (from != '' && to != '' && route != '') {
            console.log('Calculating Route... From: ' + from + ', To: ' + to + ', Route: ' + route);
            calculateAndDisplayRoute(from, to, route, directionsService, directionsDisplay, 'aprox-time-div');
        }

        if (from != '' && to != '' && routeto != '') {
            //calculating the way back
            console.log('Calculating Route Back... From: ' + to + ', To: ' + from + ', Route: ' + routeto);
            calculateAndDisplayRoute(to, from, routeto, directionsServiceTo, directionsDisplayTo, 'aprox-time-div-to');
        }
    });

    //LoadRouteOptions();

    $('#fade').editableSelect({ effects: 'fade' });

    $('#DateTimeDisplay').datetimepicker({
        mask: false,
        format: 'd/m/Y g:i a',
        formatTime: 'g:i a',
        monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
        dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
        dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
        minDate: Date.now(),
        maxDate: addDays(Date.now(), 31),
        step: 15,
        //onSelect: function (selectedDate) {
        //    var option = this.id == "from" ? "minDate" : "maxDate",
        //        instance = $(this).data("datepicker"),
        //        date = $.datepicker.parseDate(instance.settings.dateFormat || $.datepicker._defaults.dateFormat, selectedDate, instance.settings);
        //    dates.not(this).datepicker("option", option, date);
        //}
        //onChangeDateTime: function (current_time, $input) {
        //    $('#TotalSpaces').focus();

        //    if (current_time == null) {
        //        $("#DateTimeDisplay").datetimepicker({
        //            minTime: new Date()
        //        });
        //    } else if (current_time.toLocaleDateString() == new Date().toLocaleDateString()) {
        //        $("#DateTimeDisplay").datetimepicker({
        //            minTime: new Date()
        //        });
        //    } else {
        //        $("#DateTimeDisplay").datetimepicker({
        //            minTime: '00:00'
        //        });
        //    }

        //}
    });

    $('#DateTimeDisplay-To').datetimepicker({
        mask: false,
        format: 'd/m/Y g:i a',
        formatTime: 'g:i a',
        monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
        monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
        dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
        dayNamesShort: ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'],
        minDate: Date.now(),
        maxDate: addDays(Date.now(), 31),
        step: 15,
        onChangeDateTime: function (current_time, $input) {
            $('#TotalSpaces').focus();
        }
    });

    //$('#JourneyId').change(function () {
    //    LoadRouteOptions();
    //});

    function SetRouteOption(index) {
        var selectedOption = $('#hiddenOption' + index).val();

        $('#RouteDetail').val(selectedOption);
    }

    function SetDateTimeFormats() {
        var formattedValue = document.getElementById('DateTimeDisplay').value;
        var formattedValueTo = document.getElementById('DateTimeDisplay-To').value;
        
        $('#DateTime').val(formattedValue);
        $('#DateTime-To').val(formattedValueTo);

        if ($('#fromDistrictId').val() == '') {
            //¡Origen Inválido!
            DisplayGrowlMessage('100012', 'warn');
            return false;
        }

        if ($('#toDistrictId').val() == '') {
            //¡Destino Inválido!
            DisplayGrowlMessage('100036', 'warn');
            return false;
        }

        if ($('#Trip_Price').val() == '') {
            //¡Cuota Requerida!
            DisplayGrowlMessage('100038', 'warn');
            return false;
        }

        if ($('#Route').val() == '') {
            //¡Ruta Requerida!
            DisplayGrowlMessage('100039', 'warn');
            return false;
        }

        if ($('#DateTime').val() == '') {
            //¡Fecha inválida!
            DisplayGrowlMessage('100037', 'warn');
            return false;
        }

        if ($('#Trip_Details').val() == '') {
            //¡Encuentro Requerido!
            DisplayGrowlMessage('100072', 'warn');
            return false;
        }

        if ($('#rbRound').prop("checked")) {
            if ($('#Route-To').val() == '') {
                //¡Ruta de vuelta inválida!
                DisplayGrowlMessage('100069', 'warn');
                $('#btn-create-trip').button('reset');

                return false;
            } else if ($('#DateTimeDisplay-To').val() == '') {
                //¡Fecha de vuelta requerida!
                DisplayGrowlMessage('100070', 'warn');
                $('#btn-create-trip').button('reset');

                return false;
            } else if ($('#Trip_Details_To').val() == '') {
                //¡Encuentro de vuelta requerido!
                DisplayGrowlMessage('100071', 'warn');
                $('#btn-create-trip').button('reset');

                return false;
            }
        }


        $('#createtripform').submit();
    }

    function ChangeTripRound(isRoundTrip) {
        if (isRoundTrip) {
            $('#to-route-container').slideDown();
            //$('#rbOneWay').prop('checked', false);
            $('#rbRound').prop('checked', true);
            $('#rbOneWay').prop('checked', false);
        } else {
            $('#to-route-container').slideUp();
            $('#rbOneWay').prop('checked', true);
            $('#rbRound').prop('checked', false);
        }
    }

    //function LoadRouteOptions() {
    //    var split = $("#JourneyId :selected").text().split(' < - > ');

    //    $('#RouteDetail').val(split[0]);

    //    $('#hiddenOption1').val(split[0]);
    //    $('#hiddenOption2').val(split[1]);

    //    $('#ckPlace1').html('<span class="ui-checkboxradio-icon ui-corner-all ui-icon ui-icon-background ui-icon-blank"></span><span class="ui-checkboxradio-icon-space"> </span>' + split[0]);
    //    $('#ckPlace2').html('<span class="ui-checkboxradio-icon ui-corner-all ui-icon ui-icon-background ui-icon-blank ui-state-hover"></span><span class="ui-checkboxradio-icon-space"> </span>' + split[1]);
    //}

    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }

    $('#createtripform').submit(function () {
        $('#btn-create-trip').button('loading');

        return true;
    });

    var directionsDisplay;
    var directionsService;

    var directionsDisplayTo;
    var directionsServiceTo;

    var map;
    var mapto;

    //function initMap() {
    //    map = new google.maps.Map(document.getElementById('map'), {
    //        center: { lat: -34.397, lng: 150.644 },
    //        zoom: 8
    //    });
    //}
    function initMap() {
        var infoWindow = new google.maps.InfoWindow;
        directionsService = new google.maps.DirectionsService;
        directionsDisplay = new google.maps.DirectionsRenderer;

        directionsServiceTo = new google.maps.DirectionsService;
        directionsDisplayTo = new google.maps.DirectionsRenderer;
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: { lat: 41.85, lng: -87.65 },
            disableDefaultUI: true
        });
        mapto = new google.maps.Map(document.getElementById('map-to'), {
            zoom: 10,
            center: { lat: 41.85, lng: -87.65 },
            disableDefaultUI: true
        });

        directionsDisplay.setMap(map);
        directionsDisplayTo.setMap(mapto);

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                /*infoWindow.setPosition(pos);
                infoWindow.setContent('¡Estás Aquí!');
                infoWindow.open(map);*/
                map.setCenter(pos);
                mapto.setCenter(pos);
            }, function () {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }
    }

    function calculateAndDisplayRoute(from, to, route, directionsService, directionsDisplay, displayControl) {
        var waypts = [];

        var countryName = '@Model.CountryName'
        console.log('User\'s country: ' + countryName);

        from = countryName + ', ' + from;
        to = countryName + ', ' + to;
        route = countryName + ', ' + route;

        waypts.push({
            location: route,
            stopover: true
        });

        directionsService.route({
            origin: from,
            destination: to,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: 'DRIVING'
        }, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response);
                computeTotalDistance(directionsDisplay.directions, displayControl);
                console.log(response)
            } else {
                console.log('Directions request failed due to ' + status);
            }
        });
    }

    function computeTotalDistance(result, displayControl) {
        var total = 0;
        var time = 0;
        var from = 0;
        var to = 0;
        var myroute = result.routes[0];

        for (var i = 0; i < myroute.legs.length; i++) {
            total += myroute.legs[i].distance.value;
            time += Number(myroute.legs[i].duration.value);
            from = myroute.legs[i].start_address;
            to = myroute.legs[i].end_address;
        }

        time = time / 60 / 60;
        total = total / 1000;

        var html = `<small><b>Distancia Aproximada: </b>` + Math.round(total) + ` kms.</small>` + `<small><b> Tiempo Aproximado: </b>` + convertToHHMM(time) + `</small>`
        $('#' + displayControl).html(html);
        $('#' + displayControl).slideDown();
    }

    function convertToHHMM(info) {
        var hrs = parseInt(Number(info));
        var min = Math.round((Number(info) - hrs) * 60);

        var hStr = 'hora';
        var mStr = 'minutos';

        if (hrs > 1) {
            hStr = 'horas';

            return hrs + ' ' + hStr + ', ' + min + ' ' + mStr;
        } else {
            if (hrs == 1) {
                return hrs + ' ' + hStr + ', ' + min + ' ' + mStr;
            } else {
                return min + ' ' + mStr;
            }
        }
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCPTyaclzn7_zYJoi4eUKcN444cCX9COQg&callback=initMap" async defer></script>