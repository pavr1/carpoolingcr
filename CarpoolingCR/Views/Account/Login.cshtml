@using CarpoolingCR.Models
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
}
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
<br />
<div class="row form-group" style="text-align:center">
    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-0">
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-12">
        <h5 class="panel-title pull-left">Inicia Sesión</h5>
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4 col-xs-0">
    </div>
</div>
<div class="row" style="text-align:center">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <hr />
    </div>
</div>
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <section id="loginForm">
            @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id= "LoginForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row form-group">
                    @*<div class="col-lg-2 col-md-2 col-sm-2 col-xs-3">
                            @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                        </div>
                        <div class="col-lg-10 col-md-10 col-sm-10 col-xs-9">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                        </div>*@

                    @*<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            @Html.LabelFor(m => m.Email, new { @class = "control-label pull-left" })
                        </div>*@
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                    <div class="col-lg-4 col-md-8 col-sm-10 col-xs-12">
                        <div class="input-group">
                            <input type="text" id="UserEmail" name="UserEmail" class="form-control" aria-label="..." style="width:40%" placeholder="Correo">
                            <input type="text" id="Email" name="Email" style="display:none" />
                            <label class="form-control bg-secondary" style="width:15%;font-size:medium;text-align:center;background-color:lightgrey;">@@</label>
                            <select class="form-control" id="emailDomain" style="width:45%; border-radius: 0px 10px 10px 0px !important">
                                @{
                                    foreach (var item in (SelectList)ViewBag.EmailDomains)
                                    {
                                        <option>@item.Text</option>
                                    }
                                }
                            </select>
                        </div><!-- /input-group -->
                    </div>
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                </div>

                <div class="row form-group">
                    @*<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                            @Html.LabelFor(m => m.Password, new { @class = "control-label" })
                        </div>*@
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                    <div class="col-lg-4 col-md-8 col-sm-10 col-xs-12">
                        <input type="password" id="Password" name="Password" class="form-control" aria-label="..." style="width:100%" placeholder="Clave">
                        @*@Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })*@
                    </div>
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                    <div class="col-lg-4 col-md-8 col-sm-10 col-xs-12">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                                @Html.CheckBoxFor(m => m.RememberMe)
                                @Html.LabelFor(m => m.RememberMe)
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                    <div class="col-lg-4 col-md-8 col-sm-10 col-xs-12">
                        <input type="button" id="btn-login" name="btn-login" class="btn btn-info btn-sm btn-block" onclick="return Login()" style="width:250px; border-radius:10px" value="Iniciar Sesión" />
                        @*<fb:login-button class="pull-right" scope="public_profile,email" onlogin="checkLoginState();"></fb:login-button>*@
                    </div>
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                    <div class="col-lg-4 col-md-8 col-sm-10 col-xs-12">
                        <p>
                            @Html.ActionLink("Regístrate", "Register")
                        </p>
                        <p>
                            @Html.ActionLink("Olvidaste tu contraseña?", "ForgotPassword")
                        </p>
                    </div>
                    <div class="col-lg-4 col-md-2 col-sm-1 col-xs-0">

                    </div>
                </div>
                                    }
        </section>
    </div>
    <div class="row form-group">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="text-align:justify">
            @if (ViewBag.EmailNotConfirmed != null)
            {
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12" style="border-radius:50px">
                    <small style="color:red">
                        ¡Tu cuenta no ha sido verificada! Te hemos reenviado el correo de confirmación. Si no lo encuentras revisa en los correos no deseados.<br /><br />
                        Si tu problema persiste, por favor contácta al administrador al correo <a href="mailto:administrador@buscoridecr.com?subjet:Problemas">administrador@buscoridecr.com</a>
                    </small>
                </div>
            }
        </div>
    </div>
    <div id="status"></div>
    @*<div class="col-md-4">
            <section id="socialLoginForm">
                @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
            </section>
        </div>*@
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    function Login() {
        var email = $('#UserEmail').val();
        var emailDomain = $('#emailDomain').val();
        var Password = $('#Password').val();

        if (email == '') {
            //¡Correo electrónico requerido!
            DisplayGrowlMessage('100055', 'warn')
            $('#btn-login').button(reset);

            return false;
        }

        email = email.trim() + "@@" + emailDomain;
        $('#Email').val(email);

        if (Password == '') {
            //¡Contraseña Requerida!
            DisplayGrowlMessage('100056', 'warn')
            $('#btn-login').button(reset);

            return false;
        }

        $('#LoginForm').submit();
    }
    //window.fbAsyncInit = function () {
    //    FB.init({
    //        appId: '403030990339059',
    //        cookie: true,
    //        status: true,
    //        xfbml: true,
    //        version: 'v4.0'
    //    });

    //    FB.AppEvents.logPageView();

    //    FB.getLoginStatus(function (response) {
    //        statusChangeCallback(response);
    //    });
    //};

    //function checkLoginState() {
    //    FB.getLoginStatus(function (response) {
    //        statusChangeCallback(response);
    //    });
    //}

    //(function (d, s, id) {
    //    var js, fjs = d.getElementsByTagName(s)[0];
    //    if (d.getElementById(id)) { return; }
    //    js = d.createElement(s); js.id = id;
    //    js.src = "https://connect.facebook.net/en_US/sdk.js";
    //    fjs.parentNode.insertBefore(js, fjs);
    //}(document, 'script', 'facebook-jssdk'));

    //function statusChangeCallback(response) {
    //    console.log('statusChangeCallback');
    //    console.log(response);
    //    // The response object is returned with a status field that lets the
    //    // app know the current login status of the person.
    //    // Full docs on the response object can be found in the documentation
    //    // for FB.getLoginStatus().
    //    if (response.status === 'connected') {
    //        // Logged into your app and Facebook.
    //        console.log('Welcome!  Fetching your information.... ');
    //        FB.api('/me', function (response) {
    //            console.log('Successful login for: ' + response.name);
    //            document.getElementById('status').innerHTML =
    //                'Thanks for logging in, ' + response.name + '!';
    //        });
    //    } else {
    //        // The person is not logged into your app or we are unable to tell.
    //        document.getElementById('status').innerHTML = 'Please log ' +
    //            'into this app.';
    //    }
    //}
</script>