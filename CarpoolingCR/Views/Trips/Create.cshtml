@model CarpoolingCR.Objects.Responses.TripCreateResponse

@{
    ViewBag.Title = "Create";
}

<h2>Viajes</h2>

<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">*@
<meta charset="utf-8">

@using (Html.BeginForm("Create", "Trips", FormMethod.Post, new { id = "createtripform" }))
{
    <input type="hidden" id="hiddenOption1" />
    <input type="hidden" id="hiddenOption2" />

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row form-group">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Origen</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        <select id="FromTown" name="FromTown" class="form-control waypoints">
                            @{
                                foreach (var item in Model.Towns)
                                {
                                    <option value="@item.DistrictId">@item.Display</option>
                                }
                            }
                        </select>
                        <label id="fromDistrictId"></label>
                    </div>
                </div>
            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Destino</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        <select id="ToTown" name="ToTown" class="form-control waypoints">
                            @{
                                foreach (var item in Model.Towns)
                                {
                                    <option value="@item.DistrictId">@item.Display</option>
                                }
                            }
                        </select>
                        <label id="toDistrictId"></label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row form-group">
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Ruta</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-13">
                        <select id="Route" name="Route" class="form-control waypoints">
                            @{
                                foreach (var item in Model.Towns)
                                {
                                    <option value="@item.DistrictId">@item.Display</option>
                                }
                            }
                        </select>
                        <div class="spinner-border m-5" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Fecha</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        <input id="DateTimeDisplay" name="DateTimeDisplay" autocomplete="off" class="form-control" type="text" onfocus="blur();">
                        <input type="text" id="DateTime" name="DateTime" class="hidden" />
                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2">
                    </div>

                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                        <label class="control-label" style="text-align:left">Espacios</label>
                    </div>
                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                        <label class="control-label" style="text-align:left">Disponibles</label>
                    </div>
                </div>
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2">
                    </div>

                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                        <input id="TotalSpaces" class="" style="width:40px;" name="TotalSpaces" disabled onfocus="blur();">
                    </div>
                    <div class="col-lg-2 col-md-5 col-sm-5 col-xs-6">
                        <input id="AvailableSpaces" class="" style="width:40px;" name="AvailableSpaces" onfocus="blur();">
                    </div>
                </div>
                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Cuota</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        @Html.EditorFor(model => model.Trip.Price, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div class="row form-group">
                    <div class="col-lg-2 col-md-2 col-sm-2 col-xs-12">
                        <label class="control-label" style="text-align:left">Encuentro</label>
                    </div>
                    <div class="col-lg-10 col-md-10 col-sm-10 col-xs-12">
                        @Html.EditorFor(model => model.Trip.Details, new { htmlAttributes = new { @class = "form-control" } })
                    </div>
                </div>

                <div class="form-group hidden">
                    @Html.LabelFor(model => model.Trip.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EnumDropDownListFor(model => model.Trip.Status, htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>

            </div>
            <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                <div id="aprox-time-div">
                </div>
                <div id="map" style="height:300px;border-radius:10px"></div>
            </div>
        </div>

        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @Html.ActionLink("<<", "Index", new { }, new { @class = "btn btn-primary" })
                <button type="submit" id="btn-create-trip" onclick="return SetDateTimeFormats()" class="btn btn-info btn-sm btn-block pull-right" data-loading-text="<i class='fa fa-circle-o-notch fa-spin pull-right'></i> Crear" style="width:150px; border-radius:25px">Crear</button>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    $('#FromTown')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                $('#fromDistrictId').val(li.val())
            );
        });
    $('#ToTown')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                $('#toDistrictId').val(li.val())
            );
        });
    $('#Route')
        .editableSelect()
        .on('select.editable-select', function (e, li) {
            $('#last-selected').html(
                //$('#toDistrictId').val(li.val())
            );
        });

    $('.waypoints').focusout(function(){
        var from = $('#FromTown').val();
        var to = $('#ToTown').val();
        var route = $('#Route').val();

        if (from != '' && to != '' && route != '') {
            
            console.log('Calculating Route... From: ' + from + ', To: ' + to + ', Route: ' + route);
            calculateAndDisplayRoute(from, to, route);
        }else{
            console.log('Did not calculate route, missing data. From: ' + from + ', To: ' + to + ', Route: ' + route)
        }
    });

    LoadRouteOptions();
    $('#fade').editableSelect({ effects: 'fade' });

    $('#DateTimeDisplay').datetimepicker({
        mask: false,
        format: 'd/m/Y g:i a',
        formatTime: 'g:i a',
        minDate: Date.now(),
        maxDate: addDays(Date.now(), 31),
        step: 15,
        onChangeDateTime: function (current_time, $input) {
            $('#TotalSpaces').focus();
        }
    });

    $('#TotalSpaces').spinner({
        min: @Model.Vehicle.Spaces,
        max: @Model.Vehicle.Spaces,
        stop: function (e, ui) {
            //$('#AvailableSpaces').val($('#TotalSpaces').val() - 1)
        }
    }).val(@Model.Vehicle.Spaces);

    $('#AvailableSpaces').spinner({
        min: 1,
        max: @Model.Vehicle.Spaces - 1,
        stop: function (e, ui) {
            if ($('#AvailableSpaces').val() > $('#TotalSpaces').val()) {
                $('#AvailableSpaces').val($('#TotalSpaces').val());
            }
        }
    }).val(@Model.Vehicle.Spaces - 1);

    //$("#radioset").buttonset();

    $('#JourneyId').change(function () {
        LoadRouteOptions();
    });

    function SetRouteOption(index) {
        var selectedOption = $('#hiddenOption' + index).val();

        $('#RouteDetail').val(selectedOption);
    }

    function SetDateTimeFormats() {
        var formattedValue = document.getElementById('DateTimeDisplay').value;

        $('#DateTime').val(formattedValue);
    }

    function LoadRouteOptions() {
        var split = $("#JourneyId :selected").text().split(' < - > ');

        $('#RouteDetail').val(split[0]);

        $('#hiddenOption1').val(split[0]);
        $('#hiddenOption2').val(split[1]);

        $('#ckPlace1').html('<span class="ui-checkboxradio-icon ui-corner-all ui-icon ui-icon-background ui-icon-blank"></span><span class="ui-checkboxradio-icon-space"> </span>' + split[0]);
        $('#ckPlace2').html('<span class="ui-checkboxradio-icon ui-corner-all ui-icon ui-icon-background ui-icon-blank ui-state-hover"></span><span class="ui-checkboxradio-icon-space"> </span>' + split[1]);
    }

    function addDays(date, days) {
        var result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }

    $('#createtripform').submit(function () {
        var exists = false;

        if ($('#fromDistrictId').val() == '') {
            //¡Origen Inválido!
            DisplayGrowlMessage('10005', 'warn');
            return false;
        }

        if ($('#toDistrictId').val() == '') {
            //¡Destino Inválido!
            DisplayGrowlMessage('10006', 'warn');
            return false;
        }

        if ($('#Route').val() == '') {
            //¡Origen Inválido!
            DisplayGrowlMessage('100039', 'warn');
            return false;
        }

        if ($('#DateTime').val() == '') {
            //¡Fecha inválida!
            DisplayGrowlMessage('100037', 'warn');
            return false;
        }
        if ($('#Trip.Price').val() == '') {
            //¡Cuota Requerida!
            DisplayGrowlMessage('100038', 'warn');
            return false;
        }

        $('#btn-create-trip').button('loading');

        return true;
    });
</script>

<script>
    var directionsDisplay;
    var directionsService;

    var map;

    //function initMap() {
    //    map = new google.maps.Map(document.getElementById('map'), {
    //        center: { lat: -34.397, lng: 150.644 },
    //        zoom: 8
    //    });
    //}
    function initMap() {
        var infoWindow = new google.maps.InfoWindow;
        directionsService = new google.maps.DirectionsService;
        directionsDisplay = new google.maps.DirectionsRenderer;
        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 10,
            center: { lat: 41.85, lng: -87.65 },
            disableDefaultUI: true
        });
        directionsDisplay.setMap(map);

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                /*infoWindow.setPosition(pos);
                infoWindow.setContent('¡Estás Aquí!');
                infoWindow.open(map);*/
                map.setCenter(pos);
            }, function () {
                handleLocationError(true, infoWindow, map.getCenter());
            });
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }
    }

    function calculateAndDisplayRoute(from, to, route) {
        var waypts = [];

        var countryName = '@Model.CountryName'
        console.log('User\'s country: ' + countryName);

        from = countryName + ', ' + from;
        to = countryName + ', ' + to;
        route = countryName + ', ' + route;

        waypts.push({
            location: route, //document.getElementById('Route').value,
            stopover: true
        });

        directionsService.route({
            origin: from,//document.getElementById('FromTown').value,
            destination: to,//document.getElementById('ToTown').value,
            waypoints: waypts,
            optimizeWaypoints: true,
            travelMode: 'DRIVING'
        }, function (response, status) {
            if (status === 'OK') {
                directionsDisplay.setDirections(response);
                computeTotalDistance(directionsDisplay.directions);
                console.log(response)
            } else {
                window.alert('Directions request failed due to ' + status);
            }
        });
    }

    function computeTotalDistance(result) {
        var total = 0;
        var time = 0;
        var from = 0;
        var to = 0;
        var myroute = result.routes[0];

        for (var i = 0; i < myroute.legs.length; i++) {
            total += myroute.legs[i].distance.value;
            time += Number(myroute.legs[i].duration.value);
            from = myroute.legs[i].start_address;
            to = myroute.legs[i].end_address;
        }

        time = time / 60 / 60;

        var html = `<small><b>Tiempo Aproximado: </b>` + convertToHHMM(time) + `</small>`
        $('#aprox-time-div').html(html);
    }

    function convertToHHMM(info) {
        var hrs = parseInt(Number(info));
        var min = Math.round((Number(info) - hrs) * 60);

        var hStr = 'hora';
        var mStr = 'minutos';

        if (hrs > 1) {
            hStr = 'horas';
        }

        return hrs + ' ' + hStr + ', ' + min + ' ' + mStr;
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCPTyaclzn7_zYJoi4eUKcN444cCX9COQg&callback=initMap" async defer></script>